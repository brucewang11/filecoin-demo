// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/services/services.proto

package services

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
	types "github.com/proto/types"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("proto/services/services.proto", fileDescriptor_31a22b2bda9d2e46) }

var fileDescriptor_31a22b2bda9d2e46 = []byte{
	// 190 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x2d, 0x28, 0xca, 0x2f,
	0xc9, 0xd7, 0x2f, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0x2d, 0x86, 0x33, 0xf4, 0xc0, 0xe2, 0x42,
	0x1c, 0x30, 0xbe, 0x94, 0x04, 0x44, 0x61, 0x49, 0x65, 0x41, 0x6a, 0xb1, 0x7e, 0x72, 0x7e, 0x6e,
	0x6e, 0x7e, 0x1e, 0x44, 0x8d, 0x51, 0x09, 0x17, 0xa7, 0x8b, 0x6f, 0x66, 0x5e, 0xaa, 0x6f, 0x62,
	0x66, 0x9e, 0x90, 0x09, 0x17, 0x87, 0x63, 0x4a, 0x4a, 0x40, 0x66, 0x6a, 0x72, 0xaa, 0x90, 0x90,
	0x1e, 0x58, 0xb5, 0x1e, 0x4c, 0x20, 0x28, 0xb5, 0x50, 0x0a, 0x53, 0xac, 0x58, 0x89, 0x41, 0xc8,
	0x90, 0x8b, 0xdd, 0x3d, 0x35, 0x2f, 0x20, 0x3f, 0xb8, 0x44, 0x48, 0x10, 0xaa, 0x00, 0xca, 0x07,
	0xe9, 0xc1, 0x10, 0x2a, 0x56, 0x62, 0x30, 0x6a, 0x62, 0xe4, 0xe2, 0x00, 0x5b, 0x1b, 0x5c, 0x9a,
	0x24, 0x64, 0xc5, 0xc5, 0x15, 0x9c, 0x9a, 0x98, 0x13, 0x94, 0x5a, 0x5c, 0x9a, 0x53, 0x22, 0x24,
	0x02, 0x55, 0x8f, 0x10, 0x02, 0x99, 0x82, 0x4d, 0x14, 0x64, 0xb7, 0x15, 0x17, 0x17, 0xd4, 0x54,
	0x64, 0xbd, 0x08, 0x21, 0x64, 0xbd, 0xc8, 0xa2, 0xc5, 0x4a, 0x0c, 0x49, 0x6c, 0xe0, 0x10, 0x30,
	0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0xba, 0xc6, 0x41, 0x11, 0x46, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DMineMainClient is the client API for DMineMain service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DMineMainClient interface {
	AddPiece(ctx context.Context, in *types.AddPieceReq, opts ...grpc.CallOption) (*types.AddPieceRes, error)
	GenPoSt(ctx context.Context, in *types.GenPoStReq, opts ...grpc.CallOption) (*types.GenPoStRes, error)
}

type dMineMainClient struct {
	cc *grpc.ClientConn
}

func NewDMineMainClient(cc *grpc.ClientConn) DMineMainClient {
	return &dMineMainClient{cc}
}

func (c *dMineMainClient) AddPiece(ctx context.Context, in *types.AddPieceReq, opts ...grpc.CallOption) (*types.AddPieceRes, error) {
	out := new(types.AddPieceRes)
	err := c.cc.Invoke(ctx, "/services.DMineMain/AddPiece", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dMineMainClient) GenPoSt(ctx context.Context, in *types.GenPoStReq, opts ...grpc.CallOption) (*types.GenPoStRes, error) {
	out := new(types.GenPoStRes)
	err := c.cc.Invoke(ctx, "/services.DMineMain/GenPoSt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DMineMainServer is the server API for DMineMain service.
type DMineMainServer interface {
	AddPiece(context.Context, *types.AddPieceReq) (*types.AddPieceRes, error)
	GenPoSt(context.Context, *types.GenPoStReq) (*types.GenPoStRes, error)
}

// UnimplementedDMineMainServer can be embedded to have forward compatible implementations.
type UnimplementedDMineMainServer struct {
}

func (*UnimplementedDMineMainServer) AddPiece(ctx context.Context, req *types.AddPieceReq) (*types.AddPieceRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPiece not implemented")
}
func (*UnimplementedDMineMainServer) GenPoSt(ctx context.Context, req *types.GenPoStReq) (*types.GenPoStRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenPoSt not implemented")
}

func RegisterDMineMainServer(s *grpc.Server, srv DMineMainServer) {
	s.RegisterService(&_DMineMain_serviceDesc, srv)
}

func _DMineMain_AddPiece_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.AddPieceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DMineMainServer).AddPiece(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.DMineMain/AddPiece",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DMineMainServer).AddPiece(ctx, req.(*types.AddPieceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DMineMain_GenPoSt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.GenPoStReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DMineMainServer).GenPoSt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.DMineMain/GenPoSt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DMineMainServer).GenPoSt(ctx, req.(*types.GenPoStReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _DMineMain_serviceDesc = grpc.ServiceDesc{
	ServiceName: "services.DMineMain",
	HandlerType: (*DMineMainServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddPiece",
			Handler:    _DMineMain_AddPiece_Handler,
		},
		{
			MethodName: "GenPoSt",
			Handler:    _DMineMain_GenPoSt_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/services/services.proto",
}

// DMineSubClient is the client API for DMineSub service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DMineSubClient interface {
	SealResult(ctx context.Context, in *types.SealResultReq, opts ...grpc.CallOption) (*types.SealResultRes, error)
	PoStResult(ctx context.Context, in *types.PoStResultReq, opts ...grpc.CallOption) (*types.PoStResultRes, error)
}

type dMineSubClient struct {
	cc *grpc.ClientConn
}

func NewDMineSubClient(cc *grpc.ClientConn) DMineSubClient {
	return &dMineSubClient{cc}
}

func (c *dMineSubClient) SealResult(ctx context.Context, in *types.SealResultReq, opts ...grpc.CallOption) (*types.SealResultRes, error) {
	out := new(types.SealResultRes)
	err := c.cc.Invoke(ctx, "/services.DMineSub/SealResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dMineSubClient) PoStResult(ctx context.Context, in *types.PoStResultReq, opts ...grpc.CallOption) (*types.PoStResultRes, error) {
	out := new(types.PoStResultRes)
	err := c.cc.Invoke(ctx, "/services.DMineSub/PoStResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DMineSubServer is the server API for DMineSub service.
type DMineSubServer interface {
	SealResult(context.Context, *types.SealResultReq) (*types.SealResultRes, error)
	PoStResult(context.Context, *types.PoStResultReq) (*types.PoStResultRes, error)
}

// UnimplementedDMineSubServer can be embedded to have forward compatible implementations.
type UnimplementedDMineSubServer struct {
}

func (*UnimplementedDMineSubServer) SealResult(ctx context.Context, req *types.SealResultReq) (*types.SealResultRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SealResult not implemented")
}
func (*UnimplementedDMineSubServer) PoStResult(ctx context.Context, req *types.PoStResultReq) (*types.PoStResultRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PoStResult not implemented")
}

func RegisterDMineSubServer(s *grpc.Server, srv DMineSubServer) {
	s.RegisterService(&_DMineSub_serviceDesc, srv)
}

func _DMineSub_SealResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.SealResultReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DMineSubServer).SealResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.DMineSub/SealResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DMineSubServer).SealResult(ctx, req.(*types.SealResultReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DMineSub_PoStResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.PoStResultReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DMineSubServer).PoStResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.DMineSub/PoStResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DMineSubServer).PoStResult(ctx, req.(*types.PoStResultReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _DMineSub_serviceDesc = grpc.ServiceDesc{
	ServiceName: "services.DMineSub",
	HandlerType: (*DMineSubServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SealResult",
			Handler:    _DMineSub_SealResult_Handler,
		},
		{
			MethodName: "PoStResult",
			Handler:    _DMineSub_PoStResult_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/services/services.proto",
}
